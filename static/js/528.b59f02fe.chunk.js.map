{"version":3,"file":"static/js/528.b59f02fe.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/contactsform/contactsform.module.css?32db","components/redux/selectors.js","components/contactsform/index.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contactslist/contactslist.module.css?ed11","components/contactslist/index.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/filter.module.css?56b3","components/filter/index.jsx","components/pages/Contacts/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactsform_form__PiXE+\",\"formLabel\":\"contactsform_formLabel__oY7uN\",\"formBtn\":\"contactsform_formBtn__ZXZj7\",\"formInput\":\"contactsform_formInput__cMK42\"};","export const selectContacts = state => state.contacts.contacts;\nexport const selectFilterContacts = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading","import style from './contactsform.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'components/redux/selectors';\nimport { addContacts } from 'components/redux/operations';\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handlerSubmit = ev => {\n    ev.preventDefault();\n    const form = ev.target;\n    const newContact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n    const contactsFilter = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(newContact.name.toLowerCase())\n    );\n    if (contactsFilter.length !== 0) {\n      return alert(`${newContact.name} is already in contacts`);\n    }\n    dispatch(addContacts(newContact));\n    form.reset();\n  };\n  return (\n    <form onSubmit={handlerSubmit} className={style.form}>\n      <label htmlFor=\"name\" className={style.formLabe}>\n        Name\n        <input\n          type=\"text\"\n          className={style.formLnput}\n          name=\"name\"\n          id=\"name\"\n          pattern=\"^[a-zA-Za]+(([' \\-][a-zA-Za])?[a-zA-Za]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor=\"number\" className={style.formLabel}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id=\"number\"\n          className={style.formInput}\n        />\n      </label>\n      <button type=\"submit\" className={style.formBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default ContactsForm;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"contactslist_list__H3NFY\",\"listItems\":\"contactslist_listItems__I-9N-\",\"listItems-btn\":\"contactslist_listItems-btn__TEG7Z\",\"listItemsBtn\":\"contactslist_listItemsBtn__3UHQG\"};","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport style from './contactslist.module.css';\nimport { deleteContacts } from 'components/redux/operations';\nimport {\n  selectContacts,\n  selectFilterContacts,\n} from 'components/redux/selectors';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const contats = useSelector(selectContacts);\n  const FilterContact = useSelector(selectFilterContacts);\n\n  const filter = contats.filter(person =>\n    person.name.toLowerCase().includes(FilterContact.toLowerCase())\n  );\n\n  return (\n    <ul className={style.list}>\n      {filter.map(({ name, id, number }) => (\n        <li key={id} className={style.listItems}>\n          {name}: <span>{number}</span>\n          <button\n            type=\"submit\"\n            className={style.listItemsBtn}\n            onClick={() => dispatch(deleteContacts(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.protoTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n  filter: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"filter_filter__4JT9Y\",\"filterInput\":\"filter_filterInput__Hvnfk\"};","import { useDispatch } from 'react-redux';\nimport style from './filter.module.css';\nimport { setStatutFilter } from 'components/redux/sliceFilter';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n\n  const filterEvcontacts = ev => [\n    dispatch(setStatutFilter(ev.target.value)),\n    console.log(setStatutFilter(ev.target.value)),\n  ];\n\n  return (\n    <label htmlFor=\"filter\" className={style.filter}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        className={style.filterInput}\n        id=\"filter\"\n        onChange={filterEvcontacts}\n      />\n    </label>\n  );\n};\nexport default FilterContacts;\n","import ContactsForm from 'components/contactsform';\nimport { ContactsList } from 'components/contactslist';\nimport FilterContacts from 'components/filter';\nimport { fetchContacts } from 'components/redux/operations';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        <div>\n          <h1>Contacts</h1>\n          <FilterContacts />\n          <ContactsList />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilterContacts","filter","dispatch","useDispatch","useSelector","onSubmit","ev","preventDefault","form","target","newContact","name","elements","value","number","contact","toLowerCase","includes","length","alert","addContacts","reset","className","style","htmlFor","type","id","pattern","title","required","ContactsList","contats","FilterContact","person","map","onClick","deleteContacts","protoTypes","PropTypes","deleteContact","onChange","setStatutFilter","console","log","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}